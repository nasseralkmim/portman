=portman= is a package to process your trade data.

* Features

1. Simple =.csv= input file.
2. Snapshot of portfolio *core* information.
   1. share holdings (what do you have?).
   2. average purchase price (how much did you pay for it?).
   3. current market price (what is the current price?).
   4. profit and loss on position (how much I'm gaining or losing?).
3. Dashboard visualization of snapshot.
   1. asset class distribution (stocks, etf, reit).
   2. stocks distribution by sector.

* Workflow

1. Every trade is recorded in a =.csv= file.
   1. you can have multiple =.csv= for you own organizational purpose, I use one for each asset class or to separate currencies.
2. If the input is the default format, you can just run as a program =python -m portman.process <file or list of data files>=
      

* Input
The input is a simple =.csv= file with your transaction history.

#+begin_example
date,type,ticker,shares,price,fee
#+end_example

* Use =portman=
:PROPERTIES:
:header-args:python: :session demo
:END:
** As a /program/ that acts on an input file
Generates a =.csv= file by calling the =portman.process= module with the trades data,

#+begin_src shell :dir examples/simple
python -m portman.process "trades.csv"
cat portfolio_trades.csv
#+end_src

#+RESULTS:
: ticker,shares,average price ($),market price ($),P/L %,market value ($),sector,name,currency,asset class
: AMZN,20,17.5,3638.03,20688.742857142857,72760.6,Consumer Cyclical,"Amazon.com, Inc.",USD,trades
: GOOG,40,6.25,2666.57,42565.12,106662.8,Communication Services,Alphabet Inc.,USD,trades

** As a /library/ in a script
Can be used in script form.

#+begin_src python :session portman-library
import portman.trades
import portman.portfolio

trades = portman.trades.Trades("examples/simple/trades.csv", asset_class='stocks')
porfolio = portman.portfolio.Portfolio(trades)
print(porfolio.summary)
#+end_src

#+RESULTS:
#+begin_example
        shares  average price ($)  market price ($)         P/L %  \
ticker                                                              
AMZN        20              17.50           3638.03  20688.742857   
GOOG        40               6.25           2666.57  42565.120000   

        market value ($)                  sector              name currency  \
ticker                                                                        
AMZN             72760.6       Consumer Cyclical  Amazon.com, Inc.      USD   
GOOG            106662.8  Communication Services     Alphabet Inc.      USD   

       asset class  
ticker              
AMZN        stocks  
GOOG        stocks  
#+end_example

** Dashboard

After generating the processed portfolio file, we can visualize in a dashboard with

#+begin_src shell :dir examples/two_sources
python -m portman.portvis.dashboard "portfolio.csv"
#+end_src


* Todo
** TODO Abstract asset class from file or trade parameter

** DONE add multiple trades sources

1. end goal:
   1. =python -m portman.process "etf-trades.csv" "stocks-trades.csv"=
2. trade source will _define an asset class_
** DONE add multiple currencies, use yahoo
** DONE use sensible defaults in trade object creation.
1. sensible defaults reduce burden of knowledge about the class needs.
2. keep flexible in case need to add new columns.
** DONE change interface to avoid object creation outside.
1. instead of creating a labels object and passing a instance, it is better to create the object inside the owner class.
   1. portfolio object own trades and labels.
** DONE check how average price was computed (trade.py).
1. naive... but effective enough.
2. it makes difference if you trade frequently.
** DONE check how import/export from potfolio-performance works.
1. csv, good and complete, but it is not as smooth as I expected.
* Changelog

1. <2021-07-02 Fri> added back sub-packages for visualization, performance and income. Since there is a strong dependence of the dataframe structure between visualization and consolidation.
2. <2021-06-28 Mon> Moved visualization to a different package, =portvis=.
   
